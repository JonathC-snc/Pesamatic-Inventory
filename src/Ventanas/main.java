/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Conexion.Conexion;
import Balanza.Balanza;
import Cliente.Cliente;
import Empleado.Empleado;
import Ventanas.add;
import Ventanas.agregarop;
import static Ventanas.Login_Pesamatic.user;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Font;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileOutputStream;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

//import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

//
/**
 *
 * @author Julio Laya
 */
public class main extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel();

    /**
     * Creates new form venta2
     */
    public ArrayList<Balanza> list = new ArrayList<>();
    
    public ArrayList<Cliente> lista = new ArrayList<>();
    
    public ArrayList<Empleado> listae = new ArrayList<>();

    public main() {
        initComponents();
        user = Login_Pesamatic.user;

        setSize(1280, 680);
        setTitle("Pesamatic Inventary - Sesion de " + user);
        setResizable(false);
        setLocationRelativeTo(null);
        //jTable1.setVisible(false);
        //table.setVisible(false);
        

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

    }

    @Override
    public java.awt.Image getIconImage() {
        java.awt.Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("Iconos/icono.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txtEdit = new javax.swing.JButton();
        txtDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtserch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtSerch = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton_balanzas = new javax.swing.JButton();
        jButton_clientes = new javax.swing.JButton();
        jButton_empleados = new javax.swing.JButton();
        jButton_Generar_PDF = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Cargar_bd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());

        jPanel1.setBackground(new java.awt.Color(255, 255, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setBackground(new java.awt.Color(255, 255, 0));
        table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descripcion", "Modelo", "Referencia", "Almacen", "Stock Actual", "Unidad", "Observacion"
            }
        ));
        table.setGridColor(new java.awt.Color(255, 255, 0));
        table.setSelectionBackground(new java.awt.Color(153, 153, 153));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setMinWidth(280);
            table.getColumnModel().getColumn(1).setMaxWidth(150);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
            table.getColumnModel().getColumn(5).setResizable(false);
            table.getColumnModel().getColumn(6).setResizable(false);
            table.getColumnModel().getColumn(7).setMinWidth(280);
            table.getColumnModel().getColumn(7).setMaxWidth(150);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, 1030, 260));

        txtEdit.setBackground(new java.awt.Color(0, 0, 0));
        txtEdit.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        txtEdit.setForeground(new java.awt.Color(255, 255, 255));
        txtEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/delete 32.png"))); // NOI18N
        txtEdit.setText("Eliminar ");
        txtEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEditActionPerformed(evt);
            }
        });
        jPanel1.add(txtEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 150, 60));

        txtDelete.setBackground(new java.awt.Color(0, 0, 0));
        txtDelete.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        txtDelete.setForeground(new java.awt.Color(255, 255, 255));
        txtDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/editar 32.png"))); // NOI18N
        txtDelete.setText("Editar");
        txtDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(txtDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 150, 60));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtserch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtserchActionPerformed(evt);
            }
        });
        jPanel2.add(txtserch, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 120, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Pesamtic.png"))); // NOI18N
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 10, 370, 90));

        txtSerch.setBackground(new java.awt.Color(0, 0, 0));
        txtSerch.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        txtSerch.setForeground(new java.awt.Color(255, 255, 255));
        txtSerch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/buscar 32.png"))); // NOI18N
        txtSerch.setText("Buscar");
        txtSerch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerchActionPerformed(evt);
            }
        });
        jPanel2.add(txtSerch, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 54, 110, 40));

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/salir.png"))); // NOI18N
        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 110, 30));

        jButton_balanzas.setBackground(new java.awt.Color(255, 255, 0));
        jButton_balanzas.setText("Balanzas");
        jButton_balanzas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_balanzasActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_balanzas, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 90, 40));

        jButton_clientes.setBackground(new java.awt.Color(255, 255, 0));
        jButton_clientes.setText("Clientes");
        jButton_clientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_clientesActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_clientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, 90, 40));

        jButton_empleados.setBackground(new java.awt.Color(255, 255, 0));
        jButton_empleados.setText("Empleados");
        jButton_empleados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_empleadosActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_empleados, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 40, 110, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 110));

        jButton_Generar_PDF.setBackground(new java.awt.Color(0, 0, 0));
        jButton_Generar_PDF.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        jButton_Generar_PDF.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Generar_PDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/adobe.png"))); // NOI18N
        jButton_Generar_PDF.setText("Generar Reporte");
        jButton_Generar_PDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Generar_PDFActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_Generar_PDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 150, 60));

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/agregar 32.png"))); // NOI18N
        jButton3.setText("Agregar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 150, 60));

        Cargar_bd.setBackground(new java.awt.Color(0, 0, 0));
        Cargar_bd.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        Cargar_bd.setForeground(new java.awt.Color(255, 255, 255));
        Cargar_bd.setText("Cargar BD");
        Cargar_bd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cargar_bdActionPerformed(evt);
            }
        });
        jPanel1.add(Cargar_bd, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 550, 150, 60));

        table_1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descripcion", "Modelo", "Referencia", "Almacen", "Stock Actual", "Unidad", "Observacion"
            }
        ));
        jScrollPane2.setViewportView(table_1);
        if (table_1.getColumnModel().getColumnCount() > 0) {
            table_1.getColumnModel().getColumn(0).setResizable(false);
            table_1.getColumnModel().getColumn(1).setMinWidth(280);
            table_1.getColumnModel().getColumn(1).setMaxWidth(150);
            table_1.getColumnModel().getColumn(2).setResizable(false);
            table_1.getColumnModel().getColumn(3).setResizable(false);
            table_1.getColumnModel().getColumn(4).setResizable(false);
            table_1.getColumnModel().getColumn(5).setResizable(false);
            table_1.getColumnModel().getColumn(6).setResizable(false);
            table_1.getColumnModel().getColumn(7).setMinWidth(280);
            table_1.getColumnModel().getColumn(7).setMaxWidth(150);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, 1030, 270));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSerchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerchActionPerformed

        String aux = txtserch.getText();//guardo en un auxiliar el valor obtenido por pntalla
        Balanza mimaterial = this.GetMAterialFromTable();
        try {

            if (aux.isEmpty()) { //mientras el auxiliar no este vacio 

                JOptionPane.showMessageDialog(null, "Debe rellenar el campo");
                txtserch.setText("");

            } else {

                for (int i = 0; i < table.getRowCount(); i++) { // recorremos la tabla entra (el getRowCount me dice cuanta filas hay en la tabla )

                    if (table.getValueAt(i, 0).equals(aux)) { //me compra el dato ingresado por pantalla con el coigo que esta en la tabla (el getValueAt me tare el valor en la columna y la fila especificada)
                        table.requestFocus();

                        table.changeSelection(i, 0, false, false);

                        table.addMouseListener(new MouseAdapter() {

                        });

                        txtserch.setText("");
                    } else if (table.getValueAt(i, 1).equals(aux)) {
                        table.requestFocus();
                        table.changeSelection(i, 1, false, false);
                        txtserch.setText("");

                    } else if (table.getValueAt(i, 2).equals(aux)) {
                        table.requestFocus();
                        table.changeSelection(i, 2, false, false);
                        txtserch.setText("");

                    } else if (table.getValueAt(i, 3).equals(aux)) {
                        table.requestFocus();
                        table.changeSelection(i, 3, false, false);
                        txtserch.setText("");

                    } else if (table.getValueAt(i, 4).equals(aux)) {
                        table.requestFocus();
                        table.changeSelection(i, 4, false, false);
                        txtserch.setText("");

                    } else if (table.getValueAt(i, 5).equals(aux)) {
                        table.requestFocus();
                        table.changeSelection(i, 5, false, false);
                        txtserch.setText("");

                    } else if (table.getValueAt(i, 6).equals(aux)) {
                        table.requestFocus();
                        table.changeSelection(i, 6, false, false);
                        txtserch.setText("");
                    }
                    //JOptionPane.showMessageDialog(null, "No se encuentra el elemento");
                    //txtserch.setText("");

                }
                

                table.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {

                        int fila_point = table.rowAtPoint(e.getPoint());
                        int columna_point = 0;
                        int filaselec = table.getSelectedRow();
                        String codigo, descripcion, modelo, referencia, almacen, stock_actual, unidad, observacion;

                        if (fila_point == -1) {
                            JOptionPane.showMessageDialog(null, "Debe seleccionar un producto", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        } else {
                            model = (DefaultTableModel) table.getModel();
                            codigo = table.getValueAt(fila_point, 0).toString();
                            descripcion = table.getValueAt(fila_point, 1).toString();
                            modelo = table.getValueAt(fila_point, 2).toString();
                            referencia = table.getValueAt(fila_point, 3).toString();
                            almacen = table.getValueAt(fila_point, 4).toString();
                            stock_actual = table.getValueAt(fila_point, 5).toString();
                            unidad = table.getValueAt(fila_point, 6).toString();
                            observacion = table.getValueAt(fila_point, 7).toString();

                            model = (DefaultTableModel) table_1.getModel();
                            String filaelemento[] = {codigo, descripcion, modelo, referencia, almacen, stock_actual, unidad, observacion};
                            model.addRow(filaelemento);
                            // model.removeRow(fila_point);
                            list.remove(mimaterial);//mimaterial es la posicion en la tabla y remove me va a borrar esa posicion // list es nuetro array 
                            this.reloadTable();

                        }

                    }

                    private void reloadTable() {
                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                });

                //JOptionPane.showMessageDialog(null, "No se encuentra el elemento");
                //txtserch.setText("");
            }

        } catch (Exception e) {

            System.err.println("Error al buscar " + e);
            JOptionPane.showMessageDialog(null, "Error al buscar el elemento");
        }


    }//GEN-LAST:event_txtSerchActionPerformed

    private void txtEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEditActionPerformed

        try {

            Balanza mimaterial = this.GetMAterialFromTable();// aqui se obtiene la posicion seleccionada 
            if (mimaterial != null) {

                try {
                    Connection conectar = Conexion.conectar();
                    PreparedStatement pst = conectar.prepareStatement(
                            "delete from balanzas where codigo = ?");
                    pst.setString(1, mimaterial.getCodigo().trim());
                    pst.executeUpdate();
                    list.remove(mimaterial);//mimaterial es la posicion en la tabla y remove me va a borrar esa posicion // list es nuetro array 
                    this.reloadTable();
                    JOptionPane.showMessageDialog(null, "Elemento Eliminado");

                } catch (Exception e) {
                    System.out.println("Error al eliminar" + e);
                    JOptionPane.showMessageDialog(null, "Error al eliminar");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Error al intentar eliminar");
            }

        } catch (Exception e) {
            System.err.println("Error al eliminar" + e);
            JOptionPane.showMessageDialog(null, "No se puede eliminar");
        }


    }//GEN-LAST:event_txtEditActionPerformed

    private void txtDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeleteActionPerformed
        Balanza mimaterial = this.GetMAterialFromTable();// en mi material se esta guardando la poscion seleccionada en la tabla 
        if (mimaterial != null){// mientras la posicion sea diferente de vacio 
            edit venta = new edit();//objeto de la clase edit 
            venta.principal = this;//llama a la venta anterior donde se meten los datos 
            venta.load(mimaterial);//carga 
            venta.position = table.getSelectedRow();
            venta.setVisible(true);
            
             //para que la venta sea visible         // TODO add your handling code here:
    }//GEN-LAST:event_txtDeleteActionPerformed
    }
    private void txtserchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtserchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtserchActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.ShowAdd();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void Cargar_bdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cargar_bdActionPerformed

        int resp
                = JOptionPane.showConfirmDialog(null, "¿ Estas Seguro ?. No podra cargar archivos excel hasta volver iniciar sesion", "Alerta !", JOptionPane.YES_NO_OPTION);

        if (resp == 1) {

        } else {
            if (resp == 0) {
                carga_de_bd();
                
            }
        }
    }//GEN-LAST:event_Cargar_bdActionPerformed

    private void jButton_Generar_PDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Generar_PDFActionPerformed
        Document document = new Document(PageSize.A4.rotate());

        try {
            String ruta = System.getProperty("user.home");
            PdfWriter.getInstance(document, new FileOutputStream(ruta + "/Desktop/Reporte_Pesamatic.pdf"));

            Image pesa = Image.getInstance("src/Iconos/image001.png");
            pesa.scaleToFit(250, 350);
            pesa.setAlignment(Chunk.ALIGN_CENTER);

            Paragraph parrafo = new Paragraph();
            parrafo.setAlignment(Paragraph.ALIGN_CENTER);
            parrafo.add(" Pesamatic \n \n");
            parrafo.setFont(FontFactory.getFont("Tahoma", 18, Font.BOLD, BaseColor.DARK_GRAY));
            parrafo.add("Inventario Sede Caracas \n\n");

            document.open();
            document.add(pesa);
            document.add(parrafo);

            PdfPTable tabla = new PdfPTable(7);
            tabla.addCell("Codigo");
            tabla.addCell("Descripcion");
            tabla.addCell("Modelo");
            tabla.addCell("Referencia");
            tabla.addCell("Almacen");
            tabla.addCell("Stock Actual");
            tabla.addCell("Unidad");
            tabla.addCell("Observacion");

            try {
                Connection conectar = Conexion.conectar();
                PreparedStatement pst = conectar.prepareStatement(
                        "select * from balanzas");
                ResultSet rs = pst.executeQuery();

                if (rs.next()) {

                    do {
                        tabla.addCell(rs.getString(1));
                        tabla.addCell(rs.getString(2));
                        tabla.addCell(rs.getString(3));
                        tabla.addCell(rs.getString(4));
                        tabla.addCell(rs.getString(5));
                        tabla.addCell(rs.getString(6));
                        tabla.addCell(rs.getString(7));
                        tabla.addCell(rs.getString(8));

                    } while (rs.next());
                    document.add(tabla);
                }
            } catch (DocumentException | SQLException e) {

            }

            document.close();
            JOptionPane.showMessageDialog(null, "Reporte Creado");

        } catch (DocumentException | HeadlessException | FileNotFoundException e) {
            System.out.println("Error en el pdf" + e);

        } catch (IOException e) {
            System.out.println("Error en la imagen" + e);
        }
    }//GEN-LAST:event_jButton_Generar_PDFActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
        new Login_Pesamatic().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int fsel = table.getSelectedRow();
        try {
            String codigo, descripcion, modelo, referencia, almacen, stock_actual, unidad, observacion;

            if (fsel == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un producto", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                model = (DefaultTableModel) table.getModel();
                codigo = table.getValueAt(fsel, 0).toString();
                descripcion = table.getValueAt(fsel, 1).toString();
                modelo = table.getValueAt(fsel, 2).toString();
                referencia = table.getValueAt(fsel, 3).toString();
                almacen = table.getValueAt(fsel, 4).toString();
                stock_actual = table.getValueAt(fsel, 5).toString();
                unidad = table.getValueAt(fsel, 6).toString();
                observacion = table.getValueAt(fsel, 7).toString();

                model = (DefaultTableModel) table_1.getModel();
                String filaelemento[] = {codigo, descripcion, modelo, referencia, almacen, stock_actual, unidad, observacion};
                model.addRow(filaelemento);

            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_tableMouseClicked

    private void jButton_balanzasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_balanzasActionPerformed
        reloadTableCliente();
        reloadTableEmpleado();
        carga_de_bd();// TODO add your handling code here:
    }//GEN-LAST:event_jButton_balanzasActionPerformed

    private void jButton_clientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_clientesActionPerformed
        reloadTable();
        reloadTableEmpleado();
        carga_bd_clientes(); // TODO add your handling code here:
    }//GEN-LAST:event_jButton_clientesActionPerformed

    private void jButton_empleadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_empleadosActionPerformed
        carga_bd_empleados();// TODO add your handling code here:
    }//GEN-LAST:event_jButton_empleadosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cargar_bd;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton_Generar_PDF;
    private javax.swing.JButton jButton_balanzas;
    private javax.swing.JButton jButton_clientes;
    private javax.swing.JButton jButton_empleados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    private javax.swing.JTable table_1;
    private javax.swing.JButton txtDelete;
    private javax.swing.JButton txtEdit;
    private javax.swing.JButton txtSerch;
    private javax.swing.JTextField txtserch;
    // End of variables declaration//GEN-END:variables

    ///// FUNCIONES
    public void carga_bd_empleados(){
        try {
            Connection conectar = Conexion.conectar();
            PreparedStatement pst = conectar.prepareStatement(
                    "select nombre, edad, cargo, direccion, telefono from empleados");

            ResultSet rs = pst.executeQuery();

            table = new JTable(model);
            jScrollPane1.setViewportView(table);
            table.setBackground(Color.yellow);

            model.addColumn("Nombre");
            model.addColumn("Edad");
            model.addColumn("Cargo");
            model.addColumn("Direccion");
            model.addColumn("Telefono");

            while (rs.next()) {
                Object[] fila = new Object[8];
                //material mimaterial = new material();

                for (int i = 0; i < 5; i++) {
                    fila[i] = rs.getObject(i + 1);
                }

//                model.addRow(fila);
                Empleado mimaterial = this.ChangetoEmpleado(fila);
                this.AddToArrayTableEmpleado(mimaterial);

            }

            conectar.close();
            
        } catch (SQLException e) {
            System.err.println("Error al llenar tabla" + e);
            JOptionPane.showMessageDialog(null, "Error al mostrar informacion");

        }
    }
    
    public void carga_bd_clientes(){
        try {
            Connection conectar = Conexion.conectar();
            PreparedStatement pst = conectar.prepareStatement(
                    "select nombre_empresa, direccion, prioridad, antiguedad, p_servicios from clientes");

            ResultSet rs = pst.executeQuery();

            table = new JTable(model);
            jScrollPane1.setViewportView(table);
            table.setBackground(Color.yellow);

            model.addColumn("Nombre de Empresa");
            model.addColumn("Direccion");
            model.addColumn("Prioridad");
            model.addColumn("Antiguedad");
            model.addColumn("Periodo de Servicios");

            while (rs.next()) {
                Object[] fila = new Object[8];
                //material mimaterial = new material();

                for (int i = 0; i < 5; i++) {
                    fila[i] = rs.getObject(i + 1);
                }

//                model.addRow(fila);
                Cliente mimaterial = this.ChangetoCliente(fila);
                this.AddToArrayTableCliente(mimaterial);

            }

            conectar.close();
            
        } catch (SQLException e) {
            System.err.println("Error al llenar tabla" + e);
            JOptionPane.showMessageDialog(null, "Error al mostrar informacion");

        }
    }
    public void carga_de_bd() {
        try {
            Connection conectar = Conexion.conectar();
            PreparedStatement pst = conectar.prepareStatement(
                    "select codigo, descripcion, modelo, referencia, almacen, stock_actual, unidad, Observacion from balanzas");

            ResultSet rs = pst.executeQuery();

            table = new JTable(model);
            jScrollPane1.setViewportView(table);
            table.setBackground(Color.yellow);

            model.addColumn("codigo");
            model.addColumn("dscripcion");
            model.addColumn("modelo");
            model.addColumn("referencia");
            model.addColumn("almacen");
            model.addColumn("stock_actual");
            model.addColumn("unidad");
            model.addColumn("observacion");

            while (rs.next()) {
                Object[] fila = new Object[8];
                //material mimaterial = new material();

                for (int i = 0; i < 8; i++) {
                    fila[i] = rs.getObject(i + 1);
                }

//                model.addRow(fila);
                Balanza mimaterial = this.ChangetoMaterial(fila);
                this.AddToArrayTable(mimaterial);

            }

            conectar.close();
            Cargar_bd.setEnabled(false);
        } catch (SQLException e) {
            System.err.println("Error al llenar tabla" + e);
            JOptionPane.showMessageDialog(null, "Error al mostrar informacion");

        }
    }

    public void AddtoTable(Balanza mimaterial) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String Dato[] = new String[8];//paso por este objeto la cantidad de columnas que  va a tener mi tabla 
        Dato[0] = mimaterial.getCodigo();
        Dato[1] = mimaterial.getDescripcion();
        Dato[2] = mimaterial.getModelo();
        Dato[3] = mimaterial.getReferencia();
        Dato[4] = mimaterial.getalmacen();
        Dato[5] = mimaterial.getstockactual();
        Dato[6] = mimaterial.getunidad();
        Dato[7] = mimaterial.getobservacion();
        model.addRow(Dato);//agrega fila 

    }
    
    public void AddtoTableCliente(Cliente mimaterial) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String Dato[] = new String[8];//paso por este objeto la cantidad de columnas que  va a tener mi tabla 
        Dato[0] = mimaterial.getNombre_empresa();
        Dato[1] = mimaterial.getDireccion();
        Dato[2] = mimaterial.getPrioridad();
        Dato[3] = mimaterial.getAntiguedad();
        Dato[4] = mimaterial.getP_servicios();
        model.addRow(Dato);//agrega fila 

    }
    
    public void AddtoTableEmpleado(Empleado mimaterial) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String Dato[] = new String[8];//paso por este objeto la cantidad de columnas que  va a tener mi tabla 
        Dato[0] = mimaterial.getNombre();
        Dato[1] = mimaterial.getEdad();
        Dato[2] = mimaterial.getCargo();
        Dato[3] = mimaterial.getDireccion();
        Dato[4] = mimaterial.getTelefono();
        model.addRow(Dato);//agrega fila 

    }

    public void AddtoTable_1(Balanza mimaterial) {
        DefaultTableModel model = (DefaultTableModel) table_1.getModel();
        String Dato[] = new String[8];//paso por este objeto la cantidad de columnas que  va a tener mi tabla 
        Dato[0] = mimaterial.getCodigo();
        Dato[1] = mimaterial.getDescripcion();
        Dato[2] = mimaterial.getModelo();
        Dato[3] = mimaterial.getReferencia();
        Dato[4] = mimaterial.getalmacen();
        Dato[5] = mimaterial.getstockactual();
        Dato[6] = mimaterial.getunidad();
        Dato[7] = mimaterial.getobservacion();
        model.addRow(Dato);//agrega fila 
    }

    public Balanza ChangetoMaterial(Object[] fila) {

        Balanza mimaterial = new Balanza();

        mimaterial.setCodigo((String) fila[0]);
        mimaterial.setDescripcion((String) fila[1]);
        mimaterial.setModelo((String) fila[2]);
        mimaterial.setReferencia((String) fila[3]);
        mimaterial.setalmacen((String) fila[4]);
        mimaterial.setstockactual((String) fila[5]);
        mimaterial.setunidad((String) fila[6]);
        mimaterial.setobservacion((String) fila[7]);

        return mimaterial;

    }
    
    public Cliente ChangetoCliente(Object[] fila){
        
        Cliente mimaterial = new Cliente();
        
        mimaterial.setNombre_empresa((String) fila[0]);
        mimaterial.setDireccion((String) fila[1]);
        mimaterial.setPrioridad((String) fila[2]);
        mimaterial.setAntiguedad((String) fila[3]);
        mimaterial.setP_servicios((String) fila[4]);
        
        return mimaterial;
    }
    
    public Empleado ChangetoEmpleado(Object[] fila){
        
        Empleado mimaterial = new Empleado();
        
        mimaterial.setNombre((String) fila[0]);
        mimaterial.setEdad((String) fila[1]);
        mimaterial.setCargo((String) fila[2]);
        mimaterial.setDireccion((String) fila[3]);
        mimaterial.setTelefono((String) fila[4]);
        
        return mimaterial;
    }

    public void reloadTable() { //borramos la tabla y cargamos el arreglo 

        this.removeAllData();// borramos toda la data 
        for (int i = 0; i < (list.size()); i++) { // este for va de la primera casilla hast ael largo del arreglo 
            Balanza object = list.get(i);
            this.AddtoTable(object);
        }

    }
    
    public void reloadTableCliente() { //borramos la tabla y cargamos el arreglo 

        this.removeAllData();// borramos toda la data 
        for (int i = 0; i < (lista.size()); i++) { // este for va de la primera casilla hast ael largo del arreglo 
            Cliente object = lista.get(i);
            this.AddtoTableCliente(object);
        }

    }
    
    public void reloadTableEmpleado() { //borramos la tabla y cargamos el arreglo 

        this.removeAllData();// borramos toda la data 
        for (int i = 0; i < (listae.size()); i++) { // este for va de la primera casilla hast ael largo del arreglo 
            Empleado object = listae.get(i);
            this.AddtoTableEmpleado(object);
        }

    }

    public void removeAllData() { //borra todo lo que tiene el arreglo 
        DefaultTableModel dm = (DefaultTableModel) table.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged(); // notifies the JTable that the model has changed
    }
    
    public void removeAllDataCliente() { //borra todo lo que tiene el arreglo 
        DefaultTableModel dm = (DefaultTableModel) table.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged(); // notifies the JTable that the model has changed
    }
    
    public void removeAllDataEmpleado() { //borra todo lo que tiene el arreglo 
        DefaultTableModel dm = (DefaultTableModel) table.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged(); // notifies the JTable that the model has changed
    }

    public void EditList(Balanza mimaterial, int position) {// mimaterial es donde guardo el valor obtenido de la tabla //position es la posicion seleccionada en la tabla
        this.list.set(position, mimaterial); //envia a la tabla los datos que tiene mi material en la posicion position 
        this.reloadTable();//llama a la metodo reloadtable que borra la tabla completa y la carga de nuevo 
    }
    
    public void EditListCliente(Cliente mimaterial, int position) {
        this.lista.set(position, mimaterial);
        this.reloadTableCliente();
    }
    
    public void EditListEmpleado(Empleado mimaterial, int position) {
        this.listae.set(position, mimaterial);
        this.reloadTableEmpleado();
    }

    public void AddToArray(Balanza mimaterial) {//pasamos nuestra variable mimaterial de tipo material que es nuestra clase, en la variable mi material se va aguardar lo que se va agregar al arreglo

        // valido que no este repetido
        this.list.add(mimaterial);

    }
    
    public void AddToArrayCliente(Cliente mimaterial) {
        this.lista.add(mimaterial);
    }
    
    public void AddToArrayEmpleado(Empleado mimaterial) {
        this.listae.add(mimaterial);
    }

    public void ShowAdd() {
        agregarop ventana = new agregarop();//objeto de la clase edit 
        ventana.principal = this;//llama a la venta anterior donde se meten los datos 
        ventana.setVisible(true);//para que la venta sea visible         // TODO add your handling code here:

    }

    public Balanza GetMAterialFromTable() { //getter que me regresa la posicion seleccionada de la lista  
        int FilaSelec = table.getSelectedRow();
        if (FilaSelec > -1) {
            Balanza seleted = list.get(FilaSelec);
            return seleted;// esta funcion me retorn es la posicion 
        } else {
            JOptionPane.showMessageDialog(this, "Fila No seleccionada ");
        }
        return null;
    }
    
    
    public Cliente GetMAterialFromTableCliente() { //getter que me regresa la posicion seleccionada de la lista  
        int FilaSelec = table.getSelectedRow();
        if (FilaSelec > -1) {
            Cliente seleted = lista.get(FilaSelec);
            return seleted;// esta funcion me retorn es la posicion 
        } else {
            JOptionPane.showMessageDialog(this, "Fila No seleccionada ");
        }
        return null;
    }
    
    public Empleado GetMAterialFromTableEmpleado() { //getter que me regresa la posicion seleccionada de la lista  
        int FilaSelec = table.getSelectedRow();
        if (FilaSelec > -1) {
            Empleado seleted = listae.get(FilaSelec);
            return seleted;// esta funcion me retorn es la posicion 
        } else {
            JOptionPane.showMessageDialog(this, "Fila No seleccionada ");
        }
        return null;
    }

    public void AddToArrayTable(Balanza mimaterial) {

        // valido que no este repetido
        //agrego al arreglo
        this.list.add(mimaterial);

        // cargo el objeto
        this.AddtoTable(mimaterial);

    }
    
    public void AddToArrayTableCliente(Cliente mimaterial){
        this.lista.add(mimaterial);
        
        this.AddtoTableCliente(mimaterial);
    }
    
    public void AddToArrayTableEmpleado(Empleado mimaterial){
        this.listae.add(mimaterial);
        
        this.AddtoTableEmpleado(mimaterial);
    }

    public void AddToArrayTable_1(Balanza mimaterial) {

        // valido que no este repetido
        //agrego al arreglo
        this.list.add(mimaterial);

        // cargo el objeto
        this.AddtoTable_1(mimaterial);

    }

    public void OpenExcel() throws SQLException {

        String FILE_NAME = "C:\\inventario\\inventario.xlsx";

        try {

            FileInputStream excelFile = new FileInputStream(new File(FILE_NAME));
            Workbook workbook = new XSSFWorkbook(excelFile);
            Sheet datatypeSheet = workbook.getSheetAt(0);
            Iterator<Row> iterator = datatypeSheet.iterator();
            Boolean flag = false;
            Boolean pasemenu = false;

            while (iterator.hasNext()) {

                Row currentRow = iterator.next();
                Iterator<Cell> cellIterator = currentRow.iterator();
                String codigo = "";
                String descripcion = "";
                String modelo = "";
                String referencia = "";
                String almacen = "";
                String stockactual = "";
                String unidad = "";
                String observacion = "";
                int count = 0;

                while (cellIterator.hasNext()) {

                    Cell currentCell = cellIterator.next();
                    String value = "";
                    //getCellTypeEnum shown as deprecated for version 3.15
                    //getCellTypeEnum ill be renamed to getCellType starting from version 4.0
                    //material objeto = new material(currentCell.getStringCellValue(),currentCell.getStringCellValue());
                    if (currentCell.getCellTypeEnum() == CellType.STRING) {

                        //this.AddtoTable( objeto);
                        System.out.print(currentCell.getStringCellValue() + "--");
                        value = currentCell.getStringCellValue();

                    } else if (currentCell.getCellTypeEnum() == CellType.NUMERIC) {

                        //material objeto = new material(currentCell.getStringCellValue(),currentCell.getStringCellValue());
                        // this.AddtoTable( objeto);
                        System.out.print(currentCell.getNumericCellValue() + "--");
                        value = String.valueOf(currentCell.getNumericCellValue());

                    }

                    if (value.equals("CODIGO")) {
                        flag = true;
                    }

                    if (value.equals("TARJETA DE DESARROLLO 2.4 GHZ DUAL")) {
//                            value = " ";
                        String p = "l";
                    }

                    if (flag) {
                        if (count == 0) {
                            codigo = value;
                        } else if (count == 1) {
                            descripcion = value;
                        } else if (count == 2) {
                            modelo = value;
                        } else if (count == 3) {
                            referencia = value;
                            // deben tener hasta 7 por las columnas las q sean
                        } else if (count == 4) {
                            almacen = value;
                        } else if (count == 5) {
                            stockactual = value;
                        } else if (count == 6) {
                            unidad = value;
                        }
                        count++;
                    }

                }

                if (flag) {
                    if (pasemenu) {
                        Balanza mimaterial = new Balanza(codigo, descripcion, modelo, referencia, almacen, stockactual, unidad, observacion);
                        /*AddToArray(mimaterial);
                        System.out.println();*/
                        Connection conectar = Conexion.conectar();
                        PreparedStatement pst = conectar.prepareStatement("insert into balanzas values(?,?,?,?,?,?,?,?,?)");

                        pst.setString(1, "0");
                        pst.setString(2, codigo);
                        pst.setString(3, descripcion);
                        pst.setString(4, modelo);
                        pst.setString(5, referencia);
                        pst.setString(6, almacen);
                        pst.setString(7, stockactual);
                        pst.setString(8, unidad);
                        pst.setString(9, observacion);
                        pst.executeUpdate();

                    }
                    pasemenu = true;

                }

            }

            JOptionPane.showMessageDialog(null, "Archivo excel cargado con exito");

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        reloadTable();

    }

    void AddToArrayTable(Cliente dato) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
